// <auto-generated />
using System;
using API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations.App
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("API.Data.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88515c1f-5639-41a6-a37b-6e658251c2dc"),
                            Balance = 15m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2437c672-8989-40ad-a361-3e1ecc408e9d")
                        },
                        new
                        {
                            Id = new Guid("26e79493-e834-45d8-ba6c-adb91ad761bf"),
                            Balance = 10m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2437c672-8989-40ad-a361-3e1ecc408e9d")
                        },
                        new
                        {
                            Id = new Guid("49d31644-3289-48a4-8236-9f78cf076253"),
                            Balance = 3m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f0abaff4-94e1-40e0-babc-bf25f7d96f53")
                        });
                });

            modelBuilder.Entity("API.Data.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75e6ab15-007b-4194-9e62-60cffb28c893"),
                            AccountId = new Guid("88515c1f-5639-41a6-a37b-6e658251c2dc"),
                            Amount = 5m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        },
                        new
                        {
                            Id = new Guid("6705d939-b215-413f-bd10-4734b348869c"),
                            AccountId = new Guid("88515c1f-5639-41a6-a37b-6e658251c2dc"),
                            Amount = 5m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        },
                        new
                        {
                            Id = new Guid("a521f827-ff7d-4e8a-b802-637d86286f15"),
                            AccountId = new Guid("88515c1f-5639-41a6-a37b-6e658251c2dc"),
                            Amount = 5m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        },
                        new
                        {
                            Id = new Guid("aef1a876-f654-4aec-92a5-1e039f841554"),
                            AccountId = new Guid("26e79493-e834-45d8-ba6c-adb91ad761bf"),
                            Amount = 10m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        },
                        new
                        {
                            Id = new Guid("0fee4553-91c5-4830-824f-906817d4cf6b"),
                            AccountId = new Guid("49d31644-3289-48a4-8236-9f78cf076253"),
                            Amount = 2m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        },
                        new
                        {
                            Id = new Guid("899fb601-a29e-48c4-b93c-97794fe0bc4a"),
                            AccountId = new Guid("49d31644-3289-48a4-8236-9f78cf076253"),
                            Amount = 1m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0L
                        });
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2437c672-8989-40ad-a361-3e1ecc408e9d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "admin",
                            RowVersion = 0L,
                            Username = "a"
                        },
                        new
                        {
                            Id = new Guid("f0abaff4-94e1-40e0-babc-bf25f7d96f53"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = "user",
                            RowVersion = 0L,
                            Username = "b"
                        });
                });

            modelBuilder.Entity("API.Data.Account", b =>
                {
                    b.HasOne("API.Data.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Transaction", b =>
                {
                    b.HasOne("API.Data.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("API.Data.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
